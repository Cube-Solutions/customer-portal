{% block _style_book_grid_element_modal_widget %}
    {% set attr = layout_attr_defaults(attr, {
        '~class': ' grid js-component-container',
        'data-page-component-view': 'orofrontend/js/app/views/style-book-playground',
        'data-page-component-options': {
            viewConstructor: 'oroui/js/modal',
            renderAfter: 'action',
            props: {
                title: {
                    label: 'Title',
                    value: 'Confirmation'
                },
                okText: 'OK',
                cancelText: 'Cancel',
                okButtonClass: 'btn ok btn--info',
                cancelButtonClass: 'btn cancel',
                handleClose: false,
                allowCancel: true,
                allowOk: true,
                content: {
                    type: 'textarea',
                    value: 'Hello'
                }
            }
        }
    }) %}

    <div {{ block('block_attributes') }}>
        <div class="style-book-group-element__preview">
            <button class="btn btn--info" data-action="click open">Open Modal</button>
        </div>

        {{ block_widget(block) }}
    </div>
{% endblock %}

{% block _style_book_grid_element_config_widget %}
    <div class="playground-source">
        <pre class="language-markup"><code class="style-book-group-element__code language-markup" data-config></code></pre>
    </div>

    <div class="playground-props" data-props></div>
{% endblock %}

{% block _style_book_grid_element_modal_html_widget %}
    {% set attr = layout_attr_defaults(attr, {
        '~class': ' grid'
    }) %}

    {% set source_code %}
        <div class="example-container">
            <button class="btn btn--info" id="modal-toggle">Open Some Modal</button>
        </div>

        <script>
            require(['jquery', 'oroui/js/modal'], function ($, Modal) {
                $('#modal-toggle').on('click', function(event) {
                    var ModalExample = new Modal({
                        title: 'Some Title',
                        okText: 'OK',
                        cancelText: 'Cancel',
                        content: 'Some content in modal'
                    });

                    ModalExample.on('ok', function(){
                        // Make some actions when user press 'OK' button
                    });

                    ModalExample.on('cancel', function(){
                        // Make some actions when user press 'Cancel' button
                    });

                    ModalExample.on('close', function(){
                        // Make some actions when user close modal window
                    });

                    ModalExample.open();
                });
            });
        </script>
    {% endset %}

    <div {{ block('block_attributes') }}>
        <div class="style-book-group-element__source">
            <pre>
                <code class="style-book-group-element__code language-markup">
                    {{ source_code|trim|escape }}
                </code>
            </pre>
        </div>
    </div>
{% endblock %}

{% block _style_book_grid_element_modal_js_widget %}
    {% set attr = layout_attr_defaults(attr, {
    '~class': ' grid'
    }) %}

    {% set source_code %}
        define(function(require) {
            'use strict';

            var SomeExampleView;
            var BaseView = require('oroui/js/app/views/base/view');
            var Modal = require('oroui/js/modal');

            SomeExampleView = BaseView.extend({
                /**
                 * @property
                 */
                modal: null,

                events: {
                    'click #modal-toggle': 'openModal'
                },

                initialize: function() {
                    SomeExampleView.__super__.initialize.apply(this);

                    this.modal = new Modal({
                        title: 'Some Title',
                        okText: 'OK',
                        cancelText: 'Cancel',
                        content: 'Some content in modal'
                    });
                },

                openModal: function() {
                    this.modal.on('ok', _.bind(this._onOKModal, this));
                    this.modal.on('cancel', _.bind(this._onCancelModal, this));
                    this.modal.on('close', _.bind(this._onCloseModal, this));

                    this.modal.open();
                },

                _onOKModal: function() {
                    // Make some actions when user press 'OK' button
                },

                _onCancelModal: function() {
                    // Make some actions when user press 'Cancel' button
                },

                _onCloseModal: function() {
                    // Make some actions when user close modal window
                }
            });

            return SomeExampleView;
        });
    {% endset %}

    <div {{ block('block_attributes') }}>
        <div class="style-book-group-element__source">
            <pre>
                <code class="style-book-group-element__code language-javascript">
                    {{ source_code|trim|escape }}
                </code>
            </pre>
        </div>
    </div>
{% endblock %}

{% block _style_book_grid_element_loading_mask_widget %}
    {% set attr = layout_attr_defaults(attr, {
        '~class': ' grid js-component-container',
        'data-page-component-view': 'orofrontend/js/app/views/style-book-playground',
        'data-page-component-options': {
            viewConstructor: 'orofrontend/js/style-book-views/loading-mask-playground-view',
            props: {
                hideDelay: -1,
                loadingHint: 'Loading...'
            }
        }
    }) %}

    <div {{ block('block_attributes') }}>
        <div data-example-view>
            <div class="btn-group" role="group">
                <button type="button" class="btn btn--info" data-toggle>Toggle Loading</button>
                <button type="button" class="btn btn--info" data-toggle-full-page>Execute full-page loading</button>
            </div>
            <div class="view-container" data-loading-container></div>
        </div>

        {{ block_widget(block) }}
    </div>
{% endblock %}

{% block _style_book_grid_element_loading_mask_config_widget %}
    <div class="playground-source">
        <pre class="language-markup"><code class="style-book-group-element__code language-markup" data-config></code></pre>
    </div>

    <div class="playground-props" data-props></div>
{% endblock %}

{% block _style_book_grid_element_loading_mask_js_widget %}
    {% set attr = layout_attr_defaults(attr, {
    '~class': ' grid'
    }) %}

    {% set source_code %}
    define(function(require) {
        'use strict';

        var SomeExampleView;
        var BaseView = require('oroui/js/app/views/base/view');
        var LoadingMaskView = require('oroui/js/app/views/loading-mask-view');

        SomeExampleView = BaseView.extend({
            events: {
                'click [show-loading]': 'showLoading',
                'click [hide-loading]': 'hideLoading'
            },

            initialize: function() {
                SomeExampleView.__super__.initialize.apply(this);

                this.subview('loadingMask', new LoadingMaskView({
                    container: this.$('selector')
                }));
            },

            showLoading: function() {
                // Show loading mask on container after some action
                this.subview('loadingMask').show();
            },

            hideLoading: function() {
                // Hide loading mask on container after some action
                this.subview('loadingMask').hide();
            }
        });

        return SomeExampleView;
    });
    {% endset %}

    <div {{ block('block_attributes') }}>
        <div class="style-book-group-element__source">
            <pre>
                <code class="style-book-group-element__code language-javascript">
                    {{ source_code|trim|escape }}
                </code>
            </pre>
        </div>
    </div>
{% endblock %}

{% block _style_book_grid_element_loading_mask_mediator_widget %}
    {% set attr = layout_attr_defaults(attr, {
        '~class': ' grid'
    }) %}

    {% set source_code %}
        define(function(require) {
            'use strict';

            var SomeExampleView;
            var BaseView = require('oroui/js/app/views/base/view');
            var mediator = require('oroui/js/mediator');

            SomeExampleView = BaseView.extend({
                events: {
                    'click [show-loading]': 'showLoading',
                    'click [hide-loading]': 'hideLoading'
                },

                showLoading: function() {
                    // Show loading mask on container after some action
                    mediator.execute('showLoading');
                },

                hideLoading: function() {
                    // Hide loading mask on container after some action
                    mediator.execute('hideLoading');
                }
            });

            return SomeExampleView;
        });
    {% endset %}

    <div {{ block('block_attributes') }}>
        <div class="style-book-group-element__source">
            <pre>
                <code class="style-book-group-element__code language-javascript">
                    {{ source_code|trim|escape }}
                </code>
            </pre>
        </div>
    </div>
{% endblock %}

{% block _style_book_fullscreen_popup_view_widget %}
    {% set attr = layout_attr_defaults(attr, {
        '~class': ' js-component-container',
        'data-page-component-view': 'orofrontend/js/app/views/style-book-playground',
        'data-page-component-options': {
            viewConstructor: 'orofrontend/blank/js/app/views/fullscreen-popup-view',
            renderAfter: 'action',
            props: {
                popupIcon: 'fa-cog',
                popupBadge: true,
                popupLabel: 'Fullscreen popup'
            }
        }
    }) %}

    <div {{ block('block_attributes') }}>
        <div class="style-book-group-element__preview">
            <button class="btn btn--info" data-action="click show">Open Fullscreen Popup</button>
        </div>

        {{ block_widget(block) }}
    </div>
{% endblock %}

{% block _style_book_fullscreen_popup_view_config_widget %}
    <div class="playground-source">
        <pre class="language-markup"><code class="style-book-group-element__code language-markup" data-config></code></pre>
    </div>

    <div class="playground-props" data-props></div>
{% endblock %}
